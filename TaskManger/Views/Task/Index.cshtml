@model IEnumerable<TaskManger.Models.TaskItem>

@{
    ViewData["Title"] = "My Tasks";
    var grouped = Model.GroupBy(t => t.Status);
    var statuses = new[] { "To Do", "In Progress", "Done" };
}

<h2 class="mb-4">My Tasks</h2>

<div class="row mb-3 align-items-center">
    <div class="col-md-4">
        <input id="taskSearch" class="form-control" placeholder="Search tasks..." />
    </div>
    <div class="col-md-3">
        <select id="statusFilter" class="form-select">
            <option value="All">All Statuses</option>
            @foreach (var status in statuses)
            {
                <option value="@status">@status</option>
            }
        </select>
    </div>
    <div class="col-md-5 text-end">
        <a asp-action="Create" class="btn btn-success">
            <i class="fas fa-plus"></i> Add New Task
        </a>
    </div>
</div>

<div class="row" id="taskContainer">
    @foreach (var status in statuses)
    {
        <div class="col-md-4 mb-4 task-column" data-status="@status">
            <div class="card h-100 shadow-sm border-0">
                <div class="card-header bg-white text-center fw-bold border-bottom">
                    <i class="fas @(GetStatusIcon(status)) me-1 text-muted"></i> @status
                </div>
                <div class="card-body bg-light">
                    @{
                        var tasks = grouped.FirstOrDefault(g => g.Key == status);
                    }

                    @if (tasks != null && tasks.Any())
                    {
                        foreach (var task in tasks)
                        {
                            <div class="card task-card @GetStatusClass(status) mb-3"
                                 data-title="@task.Title" data-desc="@task.Description" data-status="@status">
                                <div class="card-body p-3">
                                    <h5 class="card-title">@task.Title</h5>
                                    <p class="card-text small text-muted mb-2">@task.Description</p>
                                    <span class="badge @GetStatusBadge(status)">@status</span>
                                </div>
                                <div class="card-footer bg-white d-flex justify-content-between align-items-center">
                                    <small class="text-muted">Due: @task.DueDate.ToString("MMM dd, yyyy")</small>
                                    <div class="btn-group">
                                        <a asp-action="Edit" asp-route-id="@task.Id" class="btn btn-sm btn-outline-primary">Edit</a>
                                        <form asp-action="Delete" asp-route-id="@task.Id" method="post" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this task?');">
                                            <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-muted text-center">No tasks</p>
                    }
                </div>
            </div>
        </div>
    }
</div>

<style>
    .task-card {
        border-left: 5px solid transparent;
        border-radius: 0.5rem;
    }

    .task-todo {
        border-left-color: #0d6efd;
    }

    .task-inprogress {
        border-left-color: #fd7e14;
    }

    .task-done {
        border-left-color: #198754;
    }

    .task-column {
        display: block;
    }

    .hidden-task {
        display: none !important;
    }
</style>

@section Scripts {
    <script>
        const searchInput = document.getElementById("taskSearch");
        const statusFilter = document.getElementById("statusFilter");

        function filterTasks() {
            const searchText = searchInput.value.toLowerCase();
            const selectedStatus = statusFilter.value;

            const cards = document.querySelectorAll(".task-card");

            cards.forEach(card => {
                const title = card.dataset.title.toLowerCase();
                const desc = card.dataset.desc.toLowerCase();
                const status = card.dataset.status;

                const matchesSearch = title.includes(searchText) || desc.includes(searchText);
                const matchesStatus = selectedStatus === "All" || selectedStatus === status;

                if (matchesSearch && matchesStatus) {
                    card.classList.remove("hidden-task");
                } else {
                    card.classList.add("hidden-task");
                }
            });
        }

        searchInput.addEventListener("input", filterTasks);
        statusFilter.addEventListener("change", filterTasks);
    </script>
}

@functions {
    public string GetStatusClass(string status) => status switch
    {
        "To Do" => "task-todo",
        "In Progress" => "task-inprogress",
        "Done" => "task-done",
        _ => ""
    };

    public string GetStatusBadge(string status) => status switch
    {
        "To Do" => "bg-primary text-white",
        "In Progress" => "bg-warning text-dark",
        "Done" => "bg-success text-white",
        _ => "bg-secondary text-white"
    };

    public string GetStatusIcon(string status) => status switch
    {
        "To Do" => "fa-clipboard-list",
        "In Progress" => "fa-spinner",
        "Done" => "fa-check-circle",
        _ => "fa-tasks"
    };
}
